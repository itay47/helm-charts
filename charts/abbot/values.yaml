image:
  repository: docker.io/arhatdev/abbot
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podSecurityContext: {}
podAnnotations: {}
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector:
  arhat.dev/namespace: default

tolerations:
- key: arhat.dev/namespace
  value: default
- key: node.kubernetes.io/unschedulable
  operator: Exists

affinity: {}

config:
  abbot:
    log:
    - level: verbose
      format: console
      file: stderr
    # - level: info
    #   format: console
    #   file: /var/log/abbot.log

    # abbot listen address, scheme can be one of [tcp, unix]
    # then listener is designed to be host local, and should
    # not be exposed to the network (dangerous)
    #
    # if not set, will not accept any request thus only host network
    # configured below will be ensured when running
    listen: unix:///var/run/abbot.sock

  hostNetwork:
    interfaces: []
    # - name: abbot0
    #   driver: bridge
    #   mtu: 1440
    #   hardware_address: ""
    #   addresses:
    #   - 10.0.0.1/24
    #   alias: ""
    #   promisc: false
    #   tx_queue_len: 1000
    #   # hairpin: true
    #   # guard: false
    #   # fastLeave: false
    #   # rootBlock: false
    #   # learning: false
    #   # flood: false
    #   # proxyArp: false
    #   # proxyArpWifi: false
    # - name: utun5
    #   driver: wireguard
    #   addresses:
    #   - 10.100.0.1/32
    #   # device mtu
    #   mtu: 1400
    #   # log output to stderr
    #   log_level: debug
    #   # (optional) private key (base64 encoded)
    #   private_key: mGmgXNWBjx2sQy2kRYcnpkHTAi9j7cCrQZzGKlK96ko=
    #   # local udp port
    #   listen_port: 65510
    #   routing:
    #     enabled: true
    #     # routing table
    #     table: 0
    #     # firewall mark
    #     firewall_mark: 0
    #     # wireguard peers
    #   peers:
    #     # public key is required (base64 encoded)
    #   - public_key: xkmpiToCbDDAHgWnJl1GgnvIaCvwcS617UK1tVMpE3U=
    #     pre_shared_key: ""
    #     # udp endpoint address
    #     endpoint: localhost:1400
    #     persistent_keepalive_interval: 10
    #     # ip addresses in this vpn
    #     allowed_ips:
    #     - 10.100.0.2/32
    proxies: []
    # - address: "10.0.0.1" # yamllint disable-line rule:quoted-strings
    #   # protocols to be proxied, will proxy all if not set
    #   protocols:
    #   - tcp
    #   - udp
    #   - icmp
    #   ipRanges:
    #   - 172.16.0.0/16
    #   - 192.168.100.0/24
    #   tproxy:
    #     mark: 0x01/0x01
    #     tcp: false
    #     udp: true
    #     routing:
    #       # routing rule priority for tproxy fwmark routing
    #       rulePriority:
    #       # routing table for tproxy fwmark lookup, 1 - 255
    #       table: 200

  containerNetwork:
    dataDir: /var/lib/abbot/container
    cniPluginsLookupPaths:
    - /opt/cni/bin
    containerInterfaceName: eth0
    # template used to generate cni config
    # yamllint disable rule:line-length
    template: |
      {
        "cniVersion": "0.3.1",
        "name": "abbot",
        "plugins": [
          {
            "type": "bridge",
            "bridge": "abbot0",
            "isGateway": true,
            "isDefaultGateway": true,
            "ipMasq": true,
            "forceAddress": true,
            "ipam": {
              "type": "host-local",
              "ranges": [{{ if gt (len .IPv4Subnet) 0 }}
                [{
                  "subnet": "{{ .IPv4Subnet }}",
                  "routes": [{ "dst": "0.0.0.0/0" }]
                }]{{ end }}{{ if and (gt (len .IPv6Subnet) 0) (gt (len .IPv4Subnet) 0) }},{{ end }}{{ if gt (len .IPv6Subnet) 0 }}
                [{
                  "subnet": "{{ .IPv6Subnet }}"
                }]{{ end }}
              ]
            }
          },
          {
            "type": "portmap",
            "capabilities": { "portMappings": true }
          },
          {
            "type": "bandwidth",
            "capabilities": { "bandwidth": true }
          }
        ]
      }
