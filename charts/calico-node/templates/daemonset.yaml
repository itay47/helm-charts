kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{ include "calico-node.fullname" . }}
  namespace: kube-system
  labels:
    {{- include "calico-node.labels" . | nindent 4 }}
spec:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      {{- include "calico-node.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "calico-node.selectorLabels" . | nindent 8 }}
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure {{ include "calico-node.fullname" . }} gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: {{ include "calico-node.fullname" . }}
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      priorityClassName: system-node-critical
      initContainers:
        # This container performs upgrade from host-local IPAM to calico-ipam.
        # It can be deleted if this is a fresh installation, or if you have already
        # upgraded to use calico-ipam.
        - name: upgrade-ipam
          image: {{ .Values.cni.image.repo }}:{{ .Values.cni.image.tag | default .Chart.AppVersion }}
          command: ["/opt/cni/bin/calico-ipam", "-upgrade"]
          volumeMounts:
            - mountPath: /var/lib/cni/networks
              name: host-local-net-dir
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
          securityContext:
            privileged: true
          env:
          {{- if .Values.bpf.enabled }}
            # Overrides for kubernetes API server host/port. Needed in BPF mode.
            - name: KUBERNETES_SERVICE_HOST
              value: {{ .Values.bpf.kubernetesAPI.host | quote }}
            - name: KUBERNETES_SERVICE_PORT
              value: {{ .Values.bpf.kubernetesAPI.port | quote }}
          {{- end }}
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CALICO_NETWORKING_BACKEND
              value: bird
        # This container installs the CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: {{ .Values.cni.image.repo }}:{{ .Values.cni.image.tag | default .Chart.AppVersion }}
          command: ["/opt/cni/bin/install"]
          env:
            {{- if .Values.bpf.enabled }}
            # Overrides for kubernetes API server host/port. Needed in BPF mode.
            - name: KUBERNETES_SERVICE_HOST
              value: {{ .Values.bpf.kubernetesAPI.host | quote }}
            - name: KUBERNETES_SERVICE_PORT
              value: {{ .Values.bpf.kubernetesAPI.port | quote }}
            {{- end }}
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # CNI MTU Config variable
            - name: CNI_MTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Prevents the container from sleeping forever.
            - name: SLEEP
              value: "false"
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
          securityContext:
            privileged: true
        # Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes
        # to communicate with Felix over the Policy Sync API.
        - name: flexvol-driver
          image: {{ .Values.flexVolumeDriver.image.repo }}:{{ .Values.flexVolumeDriver.image.tag | default .Chart.AppVersion }}
          volumeMounts:
          - name: flexvol-driver-host
            mountPath: /host/driver
          securityContext:
            privileged: true
      containers:
        - name: node
          image: {{ .Values.node.image.repo }}:{{ .Values.node.image.tag | default .Chart.AppVersion }}
          env:
            # do not create default IPPool
            - name: NO_DEFAULT_POOLS
              value: "true"
            {{- if .Values.bpf.enabled }}
            # Overrides for kubernetes API server host/port. Needed in BPF mode.
            - name: KUBERNETES_SERVICE_HOST
              value: {{ .Values.bpf.kubernetesAPI.host | quote }}
            - name: KUBERNETES_SERVICE_PORT
              value: {{ .Values.bpf.kubernetesAPI.port | quote }}
            # Actually enable BPF mode.
            - name: FELIX_BPFENABLED
              value: "true"
            - name: FELIX_BPFLOGLEVEL
              value: {{ .Values.bpf.logLevel | default "off" | quote }}
            - name: FELIX_BPFDATAIFACEPATTERN
              value: {{ .Values.bpf.matchInterface | default "^(en.*|eth.*|tunl0$)" | quote }}
            - name: FELIX_BPFEXTERNALSERVICEMODE
              value: {{ .Values.bpf.externalServiceMode | default "Tunnel" | quote }}
            - name: FELIX_BPFKUBEPROXYENDPOINTSLICESENABLED
              value: {{ .Values.bpf.enableEndpointSlice | default "false" | quote }}
            {{- end }}
            - name: FELIX_KUBENODEPORTRANGES
              value: {{ .Values.node.nodePortRanges | join "," | default "30000:32767" | quote }}
            - name: DATASTORE_TYPE
              value: "kubernetes"
            {{- if .Values.node.useNodePodCIDR }}
            # Configure route aggregation based on pod CIDR.
            - name: USE_POD_CIDR
              value: "true"
            {{- end }}
            {{- with .Values.felix.typha }}
            - name: FELIX_TYPHAK8SSERVICENAME
              value: {{ .name }}
            - name: FELIX_TYPHAK8SNAMESPACE
              value: {{ .namespace | default $.Release.Namespace }}
            {{- end }}
            - name: WAIT_FOR_DATASTORE
              value: "true"
            - name: NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CALICO_NETWORKING_BACKEND
              value: bird
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            - name: IP
              value: "autodetect"
            - name: FELIX_IPINIPMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            - name: FELIX_VXLANMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            - name: FELIX_WIREGUARDMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
          {{- if .Values.vxlan }}
            # Disable AWS source-destination check on nodes.
            - name: FELIX_AWSSRCDSTCHECK
              value: Disable
          {{- end }}
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            - name: CALICO_STARTUP_LOGLEVEL
              value: {{ .Values.node.logLevel | quote }}
            - name: CALICO_MANAGE_CNI
              value: "true"
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            - name: FELIX_IPV6SUPPORT
              value: "false"
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: "info"
            - name: FELIX_HEALTHENABLED
              value: "true"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-live
            {{- if not .Values.vxlan }}
              - -bird-live
            {{- end }}
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-ready
              {{- if not .Values.vxlan }}
              - -bird-ready
              {{- end }}
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /run/xtables.lock
              name: xtables-lock
              readOnly: false
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico
              name: var-lib-calico
              readOnly: false
            - name: policysync
              mountPath: /var/run/nodeagent
            # For eBPF mode, we need to be able to mount the BPF filesystem at /sys/fs/bpf so we mount in the
            # parent directory.
            - name: sysfs
              mountPath: /sys/fs/
              # Bidirectional means that, if we mount the BPF filesystem at /sys/fs/bpf it will propagate to the host.
              # If the host is known to mount that filesystem already then Bidirectional can be omitted.
              mountPropagation: Bidirectional
      volumes:
        # Used by {{ include "calico-node.fullname" . }}.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        - name: var-lib-calico
          hostPath:
            path: /var/lib/calico
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        - name: sysfs
          hostPath:
            path: /sys/fs/
            type: DirectoryOrCreate
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Mount in the directory for host-local IPAM allocations. This is
        # used when upgrading from host-local to calico-ipam, and can be removed
        # if not using the upgrade-ipam init container.
        - name: host-local-net-dir
          hostPath:
            path: /var/lib/cni/networks
        # Used to create per-pod Unix Domain Sockets
        - name: policysync
          hostPath:
            type: DirectoryOrCreate
            path: /var/run/nodeagent
        # Used to install Flex Volume Driver
        - name: flexvol-driver-host
          hostPath:
            type: DirectoryOrCreate
            path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds
